Index: src/main/java/net/sf/ehcache/transaction/xa/EhcacheXAResourceImpl.java
===================================================================
--- src/main/java/net/sf/ehcache/transaction/xa/EhcacheXAResourceImpl.java	(revision 2195)
+++ src/main/java/net/sf/ehcache/transaction/xa/EhcacheXAResourceImpl.java	(working copy)
@@ -477,6 +477,13 @@
     /**
      * {@inheritDoc}
      */
+    public TransactionContext getCurrentTransactionContext() {
+        return currentXid != null ? ehcacheXAStore.getTransactionContext(currentXid) : null;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
     @Override
     public boolean equals(Object obj) {
         if (obj instanceof EhcacheXAResource) {
Index: src/main/java/net/sf/ehcache/transaction/xa/EhcacheXAResource.java
===================================================================
--- src/main/java/net/sf/ehcache/transaction/xa/EhcacheXAResource.java	(revision 2195)
+++ src/main/java/net/sf/ehcache/transaction/xa/EhcacheXAResource.java	(working copy)
@@ -54,4 +54,9 @@
      */
     TransactionContext createTransactionContext() throws SystemException, RollbackException;
 
+    /**
+     * Gets the current TransactionContext associated with this resource
+     * @return the current TransactionContext, or null if none
+     */
+    TransactionContext getCurrentTransactionContext();
 }
\ No newline at end of file
Index: src/main/java/net/sf/ehcache/store/XATransactionalStore.java
===================================================================
--- src/main/java/net/sf/ehcache/store/XATransactionalStore.java	(revision 2195)
+++ src/main/java/net/sf/ehcache/store/XATransactionalStore.java	(working copy)
@@ -63,9 +63,6 @@
     private TransactionManagerLookup transactionManagerLookup;
     private TransactionManager txnManager;
 
-    private final ConcurrentHashMap<Transaction, TransactionContext> transactionToContextMap =
-            new ConcurrentHashMap<Transaction, TransactionContext>();
-
     private final ConcurrentHashMap<Transaction, EhcacheXAResource> transactionToXAResourceMap =
             new ConcurrentHashMap<Transaction, EhcacheXAResource>();
 
@@ -424,21 +421,19 @@
                 throw new CacheException("Cache " + cache.getName() + " can only be accessed within a JTA Transaction!");
             }
 
-            TransactionContext context = transactionToContextMap.get(transaction);
+            TransactionContext context;
+            EhcacheXAResource xaResource = getOrCreateXAResource();
+            context = xaResource.getCurrentTransactionContext();
             if (context != null) {
                 return context;
             }
 
-            EhcacheXAResource xaResource = getOrCreateXAResource();
-
             // xaResource.createTransactionContext() is going to enlist the XAResource in
             // the transaction so it MUST be registered first
             transactionManagerLookup.register(xaResource);
             context = xaResource.createTransactionContext();
             xaResource.addTwoPcExecutionListener(new CleanupTransactionContext(transaction));
 
-            transactionToContextMap.put(transaction, context);
-
             return context;
 
         } catch (SystemException e) {
@@ -464,7 +459,6 @@
         }
 
         public void afterCommitOrRollback(EhcacheXAResource xaResource) {
-            transactionToContextMap.remove(transaction);
             transactionToXAResourceMap.remove(transaction);
             transactionManagerLookup.unregister(xaResource);
         }
