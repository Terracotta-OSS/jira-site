Index: src/main/java/net/sf/ehcache/pool/impl/DefaultSizeOfEngine.java
===================================================================
--- src/main/java/net/sf/ehcache/pool/impl/DefaultSizeOfEngine.java	(revision 5925)
+++ src/main/java/net/sf/ehcache/pool/impl/DefaultSizeOfEngine.java	(working copy)
@@ -59,7 +59,7 @@
      * when calculating the size of the object graph.
      */
     public static final String USER_FILTER_RESOURCE = "net.sf.ehcache.sizeof.filter";
-    
+
     private static final Logger LOG = LoggerFactory.getLogger(DefaultSizeOfEngine.class.getName());
     private static final String VERBOSE_DEBUG_LOGGING = "net.sf.ehcache.sizeof.verboseDebugLogging";
 
@@ -95,25 +95,7 @@
     public DefaultSizeOfEngine(int maxDepth, boolean abortWhenMaxDepthExceeded) {
         this.maxDepth = maxDepth;
         this.abortWhenMaxDepthExceeded = abortWhenMaxDepthExceeded;
-        SizeOf bestSizeOf;
-        try {
-            bestSizeOf = new AgentSizeOf(DEFAULT_FILTER);
-            LOG.info("using Agent sizeof engine");
-        } catch (UnsupportedOperationException e) {
-            try {
-                bestSizeOf = new UnsafeSizeOf(DEFAULT_FILTER);
-                LOG.info("using Unsafe sizeof engine");
-            } catch (UnsupportedOperationException f) {
-                try {
-                    bestSizeOf = new ReflectionSizeOf(DEFAULT_FILTER);
-                    LOG.info("using Reflection sizeof engine");
-                } catch (UnsupportedOperationException g) {
-                    throw new CacheException("A suitable SizeOf engine could not be loaded: " + e + ", " + f + ", " + g);
-                }
-            }
-        }
-
-        this.sizeOf = bestSizeOf;
+        this.sizeOf = getSizeOf();
     }
 
     private DefaultSizeOfEngine(DefaultSizeOfEngine defaultSizeOfEngine, int maxDepth, boolean abortWhenMaxDepthExceeded) {
@@ -129,7 +111,11 @@
         return new DefaultSizeOfEngine(this, maxDepth, abortWhenMaxDepthExceeded);
     }
 
-    private static SizeOfFilter getUserFilter() {
+    /**
+     * Returns the user defined {@link SizeOfFilter} to use when sizing object graphs or null if one is not defined.
+     * @return the user defined {@link SizeOfFilter} or null.
+     */
+    protected static SizeOfFilter getUserFilter() {
         String userFilterProperty = System.getProperty(USER_FILTER_RESOURCE);
 
         if (userFilterProperty != null) {
@@ -170,11 +156,37 @@
      * {@inheritDoc}
      */
     public Size sizeOf(final Object key, final Object value, final Object container) {
-        Size size = sizeOf.deepSizeOf(maxDepth, abortWhenMaxDepthExceeded, key, value, container);
+        Size size = this.sizeOf.deepSizeOf(maxDepth, abortWhenMaxDepthExceeded, key, value, container);
 
         if (USE_VERBOSE_DEBUG_LOGGING && LOG.isDebugEnabled()) {
             LOG.debug("size of {}/{}/{} -> {}", new Object[]{key, value, container, size.getCalculated()});
         }
         return size;
     }
+
+    /**
+     * Returns the {@link SizeOf} to use when calculating object graph size.
+     * @return the {@link SizeOf} to use.
+     * @throws CacheException Should a SizeOf not be found.
+     */
+    protected SizeOf getSizeOf() throws CacheException {
+        SizeOf bestSizeOf;
+        try {
+            bestSizeOf = new AgentSizeOf(DEFAULT_FILTER);
+            LOG.info("using Agent sizeof engine");
+        } catch (UnsupportedOperationException e) {
+            try {
+                bestSizeOf = new UnsafeSizeOf(DEFAULT_FILTER);
+                LOG.info("using Unsafe sizeof engine");
+            } catch (UnsupportedOperationException f) {
+                try {
+                    bestSizeOf = new ReflectionSizeOf(DEFAULT_FILTER);
+                    LOG.info("using Reflection sizeof engine");
+                } catch (UnsupportedOperationException g) {
+                    throw new CacheException("A suitable SizeOf engine could not be loaded: " + e + ", " + f + ", " + g);
+                }
+            }
+        }
+        return bestSizeOf;
+    }
 }
