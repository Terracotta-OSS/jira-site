Index: code/base/jdk15-preinst-config/src/org/terracotta/modules/Jdk15PreInstrumentedConfiguration.java
===================================================================
--- code/base/jdk15-preinst-config/src/org/terracotta/modules/Jdk15PreInstrumentedConfiguration.java	(revision 12440)
+++ code/base/jdk15-preinst-config/src/org/terracotta/modules/Jdk15PreInstrumentedConfiguration.java	(working copy)
@@ -37,6 +37,9 @@
         }
       }
 
+      spec = getOrCreateSpec("java.util.concurrent.atomic.AtomicReference");
+      spec.setHonorVolatile(true);
+
       // ---------------------------------------------------------------------
       // The following section of specs are specified in the BootJarTool
       // also.
Index: code/base/excludes-config/src/org/terracotta/modules/ExcludesConfiguration.java
===================================================================
--- code/base/excludes-config/src/org/terracotta/modules/ExcludesConfiguration.java	(revision 12440)
+++ code/base/excludes-config/src/org/terracotta/modules/ExcludesConfiguration.java	(working copy)
@@ -80,7 +80,6 @@
       configHelper.addPermanentExcludePattern("java.util.concurrent.atomic.AtomicLongArray*");
       configHelper.addPermanentExcludePattern("java.util.concurrent.atomic.AtomicLongFieldUpdater*");
       configHelper.addPermanentExcludePattern("java.util.concurrent.atomic.AtomicMarkableReference*");
-      configHelper.addPermanentExcludePattern("java.util.concurrent.atomic.AtomicReference*");
       configHelper.addPermanentExcludePattern("java.util.concurrent.atomic.AtomicReferenceArray*");
       configHelper.addPermanentExcludePattern("java.util.concurrent.atomic.AtomicReferenceFieldUpdater*");
       configHelper.addPermanentExcludePattern("java.util.concurrent.atomic.AtomicStampedReference*");
Index: code/base/dso-system-tests/tests.system/com/tctest/jdk15/AtomicReferenceTest.java
===================================================================
--- code/base/dso-system-tests/tests.system/com/tctest/jdk15/AtomicReferenceTest.java	(revision 0)
+++ code/base/dso-system-tests/tests.system/com/tctest/jdk15/AtomicReferenceTest.java	(revision 0)
@@ -0,0 +1,22 @@
+/*
+ * All content copyright (c) 2003-2008 Terracotta, Inc., except as may otherwise be noted in a separate copyright notice.  All rights reserved.
+ */
+package com.tctest.jdk15;
+
+import com.tctest.TransparentTestBase;
+import com.tctest.TransparentTestIface;
+
+public class AtomicReferenceTest extends TransparentTestBase {
+
+  private static final int NODE_COUNT = 3;
+
+  public void doSetUp(TransparentTestIface t) throws Exception {
+    t.getTransparentAppConfig().setClientCount(NODE_COUNT);
+    t.initializeTestRunner();
+  }
+
+  protected Class getApplicationClass() {
+    return AtomicReferenceTestApp.class;
+  }
+
+}
Index: code/base/dso-system-tests/tests.system/com/tctest/jdk15/AtomicReferenceTestApp.java
===================================================================
--- code/base/dso-system-tests/tests.system/com/tctest/jdk15/AtomicReferenceTestApp.java	(revision 0)
+++ code/base/dso-system-tests/tests.system/com/tctest/jdk15/AtomicReferenceTestApp.java	(revision 0)
@@ -0,0 +1,161 @@
+/*
+ * All content copyright (c) 2003-2008 Terracotta, Inc., except as may otherwise be noted in a separate copyright
+ * notice. All rights reserved.
+ */
+package com.tctest.jdk15;
+
+import EDU.oswego.cs.dl.util.concurrent.CyclicBarrier;
+
+import com.tc.object.bytecode.Manageable;
+import com.tc.object.config.ConfigVisitor;
+import com.tc.object.config.DSOClientConfigHelper;
+import com.tc.object.config.TransparencyClassSpec;
+import com.tc.simulator.app.ApplicationConfig;
+import com.tc.simulator.listener.ListenerProvider;
+import com.tc.util.Assert;
+import com.tctest.runner.AbstractTransparentApp;
+
+import java.util.concurrent.atomic.AtomicReference;
+
+public class AtomicReferenceTestApp extends AbstractTransparentApp {
+
+  private final CyclicBarrier barrier;
+
+  private final DataRoot      root = new DataRoot();
+  
+  public AtomicReferenceTestApp(String appId, ApplicationConfig cfg, ListenerProvider listenerProvider) {
+    super(appId, cfg, listenerProvider);
+    barrier = new CyclicBarrier(getParticipantCount());
+  }
+
+  public void run() {
+    try {
+      AtomicReference ab = new AtomicReference();
+      Assert.assertTrue(ab instanceof Manageable);
+      atomicReferenceTesting();
+    } catch (Throwable t) {
+      notifyError(t);
+    }
+  }
+
+  private void atomicReferenceTesting() throws Exception {
+    basicSetTesting();
+    compareAndSetTesting();
+    weakCompareAndSetTesting();
+    getAndSetTesting();
+  }
+
+  private void clear() throws Exception {
+    synchronized (root) {
+      root.clear();
+    }
+
+    barrier.barrier();
+  }
+
+  private void initialize() throws Exception {
+
+    int index = barrier.barrier();
+
+    if (index == 0) {
+      root.getRefValue().set("true");
+    }
+
+    barrier.barrier();
+
+  }
+
+  private void basicSetTesting() throws Exception {
+    clear();
+    initialize();
+
+    Assert.assertEquals("true", root.getRefValue().get());
+
+    barrier.barrier();
+  }
+
+  private void compareAndSetTesting() throws Exception {
+    clear();
+    initialize();
+
+    int index = barrier.barrier();
+    if (index == 0) {
+      root.getRefValue().compareAndSet("true", "false");
+    }
+
+    barrier.barrier();
+
+    Assert.assertEquals("false", root.getRefValue().get());
+
+    barrier.barrier();
+  }
+
+  private void weakCompareAndSetTesting() throws Exception {
+    clear();
+    initialize();
+
+    int index = barrier.barrier();
+    if (index == 0) {
+      root.getRefValue().weakCompareAndSet("true", "false");
+    }
+
+    barrier.barrier();
+
+    Assert.assertEquals("false", root.getRefValue().get());
+
+    barrier.barrier();
+  }
+
+  private void getAndSetTesting() throws Exception {
+    clear();
+    initialize();
+
+    int index = barrier.barrier();
+    if (index == 0) {
+      Object val = root.getRefValue().getAndSet("false");
+      Assert.assertEquals("true", val);
+    }
+
+    barrier.barrier();
+
+    Assert.assertEquals("false", root.getRefValue().get());
+
+    barrier.barrier();
+  }
+
+  public static void visitL1DSOConfig(ConfigVisitor visitor, DSOClientConfigHelper config) {
+    TransparencyClassSpec spec = config.getOrCreateSpec(CyclicBarrier.class.getName());
+    config.addWriteAutolock("* " + CyclicBarrier.class.getName() + "*.*(..)");
+
+    String testClass = AtomicReferenceTestApp.class.getName();
+    spec = config.getOrCreateSpec(testClass);
+
+    config.addIncludePattern(testClass + "$*");
+
+    String methodExpression = "* " + testClass + "*.*(..)";
+    config.addWriteAutolock(methodExpression);
+
+    spec.addRoot("barrier", "barrier");
+    spec.addRoot("root", "root");
+  }
+
+  private static class DataRoot {
+    private AtomicReference refValue = new AtomicReference();
+    
+    public DataRoot() {
+      super();
+    }
+
+    public AtomicReference getRefValue() {
+      return refValue;
+    }
+
+    public void setRefValue(AtomicReference refValue) {
+      this.refValue = refValue;
+    }
+
+    public void clear() {
+      refValue.set(null);
+    }
+  }
+}
