<?xml version="1.0" encoding="UTF-8"?>
<!--

  All content copyright (c) 2003-2007 Terracotta, Inc.,
  except as may otherwise be noted in a separate copyright notice.
  All rights reserved.

-->

<!-- This is a Terracotta configuration file that has been pre-configured
     for use with Tomcat Sessions.
     For more information, please see the product documentation -->

<tc:tc-config xmlns:tc="http://www.terracotta.org/config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd">

  <!-- Tell DSO where the Terracotta server can be found; 
       See the Terracotta DSO Guide for additional information. -->
  <servers>
  <!--  <server host="%i" name="sample">
      <data>data/server-data</data>
      <logs>logs/server-logs</logs>
	</server>
      -->
	<server host="192.168.168.70" name="server1">
      <data>data/server1-data</data>
	<logs>logs/server1-logs</logs>
      <l2-group-port>9530</l2-group-port>
      <dso>
        <persistence>
          <mode>permanent-store</mode>
        </persistence>
      </dso>
    </server>
      <server host="192.168.168.71" name="server2">
      <data>data/server2-data</data>
        <logs>logs/server2-logs</logs>
      <l2-group-port>9530</l2-group-port>
      <dso>
        <persistence>
          <mode>permanent-store</mode>
        </persistence>
      </dso>
    </server>
	<ha>
        <mode>networked-active-passive</mode>
           <networked-active-passive>
               <election-time>5</election-time>
           </networked-active-passive>
       </ha> 
  </servers>

  <!-- Tell DSO where to put the generated client logs
       See the Terracotta DSO Guide for additional information. -->
  <clients>
    <logs>logs/client-logs/%(webserver.log.name)</logs>
    <modules>
      <module name="clustered-apache-struts-1.1" version="1.1.0"/>
	<module name="clustered-cglib-2.1.3" version="1.0.0"/>
    </modules>
  </clients>

  <application>
    <dso>
      <!-- Our app requires these custom objects/classes to be shared - the following declarations
           tells DSO which ones they are. When the app runs under DSO, instances of these classes
           will broadcast changes in their state.

           A good idiom when writing an app that you intend to cluster via TC DSO, is to group the 
           classes you wish to share under a single package (although if you follow the MVC pattern
           this tends to happen naturally) - this way the list of classes you wish to instrument
           can be concise -->
      <instrumented-classes>
        <!-- Include all classes for DSO instrumentation -->
	 <include>
          <class-expression>*..*</class-expression>
        </include>
        <include>
	  <class-expression>bg.bivanov.lrp..*</class-expression>
        </include>
	<include>
           <class-expression>bg.bivanov.lrp.application.model.Category$$EnhancerByCGLIB$$39b8526e</class-expression>
        </include>
  <include>
           <class-expression>bg.bivanov.lrp.application.model.Category$$EnhancerByCGLIB$$54ef13e1</class-expression>
         </include>
	 <include>
           <class-expression>bg.bivanov.lrp.application.model.Category$$EnhancerByCGLIB$$fd30b055</class-expression>
         </include>


        <!-- But exclude Tomcat internals to improve performance of webapp load -->
        <exclude>org.apache.coyote..*</exclude>
        <exclude>org.apache.catalina..*</exclude>
        <exclude>org.apache.jasper..*</exclude>
        <exclude>org.apache.tomcat..*</exclude>
      </instrumented-classes>

      <!-- Tell DSO which applications in your web container is using DSO -->
      <web-applications>
        <web-application>Cart</web-application>
        <web-application>DepartmentTaskList</web-application>
        <web-application>Townsend</web-application>
	<web-application>MYAPP</web-application>
      </web-applications>

      <!-- We declare the field 'service.ProductCatalog.catalog' a root, making it 
           available for all instances of our app that runs via DSO -->
      <roots>
        <root>
          <field-name>demo.townsend.service.ProductCatalog.catalog</field-name>
          <root-name>ProductCatalog</root-name>
        </root>
      </roots>
	 <additional-boot-jar-classes>
        <include>java.util.Locale</include>
        <include>java.lang.AbstractStringBuilder</include>
        <include>java.lang.StringBuffer</include>
        <include>java.io.FilterWriter</include>
        <include>java.io.Writer</include>
        <include>java.io.OutputStreamWriter</include>
        <include>java.text.DateFormat</include>
        <include>java.text.Format</include>
        <include>java.text.SimpleDateFormat</include>
        <include>java.util.GregorianCalendar</include>
        <include>java.util.Calendar</include>
        <include>sun.util.calendar.BaseCalendar</include>
        <include>sun.util.calendar.AbstractCalendar</include>
        <include>sun.util.calendar.CalendarSystem</include>
        <include>sun.util.calendar.Gregorian</include>
        <include>sun.util.calendar.BaseCalendar$Date</include>
        <include>sun.util.calendar.CalendarDate</include>
        <include>sun.util.calendar.Gregorian$Date</include>
        <include>java.util.TimeZone</include>
        <include>sun.util.calendar.ZoneInfo</include>
        <include>java.io.PrintStream</include>
        <include>java.io.FilterOutputStream</include>
        <include>java.io.OutputStream</include>
        <include>sun.nio.cs.StreamEncoder</include>
        <include>sun.nio.cs.StreamEncoder$CharsetSE</include>
        <include>java.io.BufferedWriter</include>
        <include>java.text.DateFormatSymbols</include>
        <include>java.text.NumberFormat</include>
        <include>java.text.DecimalFormat</include>
        <include>java.util.SimpleTimeZone</include>
        <include>java.nio.ByteBuffer</include>
        <include>java.nio.Buffer</include>
        <include>java.nio.HeapByteBuffer</include>
        <include>java.nio.charset.Charset</include>
        <include>sun.nio.cs.MS1251</include>
        <include>sun.nio.cs.SingleByteEncoder</include>
        <include>java.nio.charset.CharsetEncoder</include>
        <include>sun.nio.cs.MS1251$Encoder</include>
        <include>java.io.BufferedOutputStream</include>
        <include>java.text.DigitList</include>
        <include>java.text.DecimalFormatSymbols</include>
        <include>java.nio.charset.CodingErrorAction</include>
        <include>sun.nio.cs.Surrogate$Parser</include>
        <include>java.nio.charset.CoderResult</include>
      </additional-boot-jar-classes>
      <transient-fields>
        <field-name>java.io.Writer.lock</field-name>
        <field-name>sun.nio.cs.StreamEncoder$CharsetSE.out</field-name>
        <field-name>java.nio.charset.CharsetEncoder.cachedDecoder</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mActionHistory</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mEbgInfoId</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mId</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mOrganization</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mPerson</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mUserRoles</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mValidityPeriod</field-name>
        <field-name>bg.bivanov.lrp.admin.model.user.User.mLoginInfo</field-name>
      </transient-fields>

    </dso>
  </application>

</tc:tc-config>
