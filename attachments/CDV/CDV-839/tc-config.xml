<?xml version="1.0" encoding="UTF-8" ?>
<tc:tc-config xmlns:tc="http://www.terracotta.org/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd">

  <!-- Tell DSO where the Terracotta server can be found. -->
  <servers>
    <server host="%h">
      <data>%(user.home)/terracotta/server-data</data>
      <logs>%(user.home)/terracotta/server-logs</logs>
      <dso>
        <persistence>
          <mode>permanent-store</mode>
        </persistence>
      </dso>
    </server>
  </servers>

  <!-- Tell DSO where to put the generated client logs -->  
  <clients>
    <logs>%(user.home)/terracotta/client-logs</logs>
    <modules>
      <module name="clustered-commons-collections-3.1" version="2.6.3-SNAPSHOT"/>
      <module name="tim-ehcache-1.3" version="1.1.2"/>
      <module group-id="org.terracotta.modules" name="tim-jetty" version="1.0.0"/>
    </modules>
  </clients>

  <application>
    <spring>

      <!-- The JEE application name is in most cases the name of the WAR, EAR
           or JAR file in which the Spring application resides. If you are
           using Spring in a stand-alone application then you can use "*" as
           the name. The pattern matching supports wildcards of leading and
           ending asterisk (*), which matches an arbitrary number of
           characters. -->
      <jee-application name="*">

        <!-- Turns on clustering of the HTTP session. Needed for f.e. Spring
             WebFlow clustering. -->
        <session-support>true</session-support>

        <application-contexts>
          <application-context>

            <!-- Specifies the bean definition resource patterns; The matching
                 applys OR logic for individual path element. -->
            <paths>
              <path>common-conf-props.xml</path>
              <path>terracotta-conf.xml</path>
            </paths>

            <!-- Specifies the Spring beans to cluster/share; The bean name
                 should be the same name that the bean has in the Spring bean
                 config file. Matching has to be exact; -->
            <beans>
	      <bean name="tc-masterRoot"/>
            </beans>

          </application-context>
        </application-contexts>

      </jee-application>
    </spring>
    <dso>
        <instrumented-classes>
<!-- master-root -->
          <include>
            <class-expression>com.protrade.terracotta.MasterRoot</class-expression>
          </include>

<!-- base -->
          <include>
            <class-expression>com.protrade.common.base.BaseObject</class-expression>
          </include>
          <include>
            <class-expression>org.apache.commons.collections.map.LazyMap</class-expression>
          </include>
          <include>
            <class-expression>org.apache.commons.collections.map.AbstractMapDecorator</class-expression>
          </include>
          <include>
            <class-expression>org.apache.commons.collections.functors.FactoryTransformer</class-expression>
          </include>
          <include>
            <class-expression>com.protrade.common.cache.CacheFactory$ConcurrentMapFactory</class-expression>
          </include>
          <include>
            <class-expression>com.protrade.common.util.LockCache$ReentrantLockFactory</class-expression>
          </include>
          <include>
            <class-expression>com.protrade.common.cache.EhcacheMap</class-expression>
          </include>

<!-- kodo -->
          <include>
            <class-expression>kodo.util.Id</class-expression>
          </include>
          <include>
            <class-expression>kodo.datacache.DataCachePCDataImpl</class-expression>
          </include>
          <include>
            <class-expression>kodo.runtime.PCDataImpl</class-expression>
          </include>
          <include>
            <class-expression>kodo.runtime.AbstractPCData</class-expression>
          </include>
  
<!-- protrade id -->
          <include>
            <class-expression>com.protrade.common.persistence.ProtradeId+</class-expression>
          </include>

<!-- buffer -->
          <include>
            <class-expression>com.protrade.tapestry5.base.services.BufferServices$CacheValue</class-expression>
          </include>
          <include>
            <class-expression>com.protrade.tapestry5.base.services.BufferServices$BufferValue</class-expression>
          </include>

<!-- uss -->
         <include>
           <class-expression>com.protrade.unifiedsocial.USSPBaseConfig</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.hi5.base.USSPHiFiveConfig</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.facebook.base.USSPFacebookConfig</class-expression>
         </include>

<!-- tempMessages -->
         <include>
           <class-expression>com.protrade.tapestry5.base.services.AppMessages</class-expression>
         </include>

<!-- tapestry -->
         <include>
           <class-expression>org.apache.tapestry.ValidationTrackerImpl</class-expression>
         </include>
         <include>
           <class-expression>org.apache.tapestry.ValidationTrackerImpl$FieldTracker</class-expression>
         </include>

<!-- fanwars -->
         <include>
           <class-expression>com.protrade.fandom.site.forms.SendEmailFormBean</class-expression>
         </include>

<!-- ffootball -->
         <include>
           <class-expression>com.protrade.ffootball.site.services.TeamState</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.DraftTask</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.DraftChat</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.ChatMessage</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.DraftPlayerList</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.FScorerDraftVO</class-expression>
         </include>


         <include>
           <class-expression>com.protrade.common.membership.MembershipGroup</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.common.membership.MembershipLease</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.common.queue.LeasedQueue</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.DraftQueueGroup</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.DraftQueueLease</class-expression>
         </include>
         <include>
           <class-expression>com.protrade.ffootball.site.services.draft.DraftQueueGroup$DraftTaskLeague</class-expression>
         </include>




<!-- highschool -->
         <include>
           <class-expression>com.protrade.highschool.fbsite.services.CrewJoinDetailsLevelOption</class-expression>
         </include>

 
        </instrumented-classes>

        <locks>
          <autolock>
            <method-expression>* com.protrade.terracotta.MasterRoot.setMaster*(..)</method-expression>
            <lock-level>write</lock-level>
          </autolock>


<!-- kodo -->
          <autolock>
            <method-expression>* kodo.datacache.DataCachePCDataImpl.get*(..)</method-expression>
            <lock-level>read</lock-level>
          </autolock>
          <autolock>
            <method-expression>* kodo.datacache.DataCachePCDataImpl.is*(..)</method-expression>
            <lock-level>read</lock-level>
          </autolock>
          <autolock>
            <method-expression>* kodo.datacache.DataCachePCDataImpl.load*(..)</method-expression>
            <lock-level>write</lock-level>
          </autolock>
          <autolock>
            <method-expression>* kodo.datacache.DataCachePCDataImpl.set*(..)</method-expression>
            <lock-level>write</lock-level>
          </autolock>
          <autolock>
            <method-expression>* kodo.datacache.DataCachePCDataImpl.store*(..)</method-expression>
            <lock-level>write</lock-level>
          </autolock>
        </locks>

	<additional-boot-jar-classes>
          <include>java.net.InetAddress</include>
          <include>java.net.Inet4Address</include>
	  <include>java.util.UUID</include>
	</additional-boot-jar-classes>

    </dso>

  </application>

</tc:tc-config>
